"missing" packages
------------------

    MYPACKAGES='vim htop rsync git tmux mosh'
    pacman -Syu $MYPACKAGES 


Install Arch Linux
===================

as root:

    # inet?
    ping nts.is

    # hdd
    cfdisk /dev/sda # new, primary, bootable, write
    mkfs.ext4 -L MANODE /dev/sda1
    mount /dev/sda1 /mnt

    # install minimal system
    pacstrap -i /mnt base base-devel pacman systemd iproute vim git openssh mosh nodejs

    # generate fstab (label-based, in case virthost messes with our /dev)
    genfstab -L -p /mnt >> /mnt/etc/fstab
    # check it out
    vi /mnt/etc/fstab

    # chroot #########################
    arch-chroot /mnt

    # lang
    echo 'en_US.UTF-8 UTF-8' > /etc/locale.gen
    locale-gen
    echo 'LANG=en_US.UTF-8' > /etc/locale.conf
    export LANG=en_US.UTF-8

    # time
    ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime
    hwclock --systohc --utc

    # kernel modules for virt ???
    echo '' > /etc/modules-load.d/virt.conf

    # hostname
    echo 'ma-node' > /etc/hostname

    # net
    ip l # get name of interface
    systemctl enable dhcpcd@eth0.service
    
    # mkinitcpio
    # <see #FDE>
    vim /etc/mkinitcpio.conf # for modules and hooks
    mkinitcpio -p linux
    
    # grub
    vim /etc/default/grub
    # <see #FDE>
    
    grub-mkconfig -o /boot/grub/grub.cfg
    grub-install --target=i386-pc --recheck /dev/sda

    # wrap up
    passwd
    exit
    reboot
    

Resize partitions (Raspberry Pi)
================================

> from [arch forum](http://archlinuxarm.org/forum/viewtopic.php?f=31&t=3119#p18160)

1. `fdisk /dev/mmcblk0`

2. Delete the second partition /dev/mmcblk0p2
    * `d`
    * `2`

3. Create a new primary partition and use default sizes prompted. This will then create a partiton that fills the disk
    * `n`
    * `p`
    * `2`
    * `<enter>`
    * `<enter>`

4. Save and exit fdisk: `w`

5. Now reboot.

6. Once rebooted: `resize2fs /dev/mmcblk0p2`



node.js with systemd
====================

install and autostart haibu

    npm install haiku coffee

    vim /etc/systemd/system/manode.service
    [Service]
    ExecStart=/usr/bin/node /home/node/manode.js
    Restart=always
    StandardOutput=syslog
    SyslogIdentifier=manode
    Environment=NODE_ENV=production
    [Install]
    WantedBy=multi-user.target

    systemctl enable manode.service

SAMBA
=====

install [samba](https://wiki.archlinux.org/index.php/Samba)  

    pacman -Syu samba

    MYUSER=mfa
    useradd -p penis -d /home/$MYUSER $MYUSER
    usermod -a -G samba $MYUSER

    # the default config already enables user home shares
    cp /etc/samba/smb.conf.default /etc/samba/smb.conf 

    # start it
    systemctl enable smbd nmbd
    systemctl start smbd nmbd
    systemctl status nmbd smbd


    
use [webmin web admin interface](https://wiki.archlinux.org/index.php/Webmin)


    pacman -Syu webmin
    vim /etc/webmin/miniserv.conf
    # include allowed IPs in allow=127.0.0.1 192.168.1.yourIP any.other.ip.addr
    # or tunnel from your virsh-wrapper

go <http://alarmpi:10000>; <http://alarmpi:10000/samba/>


# Full-Disk-Encryption

<https://wiki.archlinux.org/index.php/Dm-crypt_with_LUKS#Prepare_hard_drive_for_Arch_Install_Scripts>

    # create a dm-crypt/LUKS blockdevice for the crypted root
    cryptsetup -y -v luksFormat /dev/sdaX
    
    # open it
    cryptsetup luksOpen /dev/sdaX cryptroot
    
    # format it
    mkfs -t ext4 /dev/mapper/cryptroot
    
    # mount it
    mount -t ext4 /dev/mapper/cryptroot /mnt
    
- continue normal install (`pacstrap`)
- **mkinitcpio**
    vim /etc/mkinitcpio.conf
    # this:
    HOOKS="base udev autodetect modconf block keyboard encrypt filesystems fsck"
    MODULES="virtio virtio_blk virtio_pci virtio_net dm_mod ext4"
- **GRUB**
    vim /etc/default/grub
    GRUB_CMDLINE_LINUX="cryptdevice=/dev/vda2:cryptroot"

# Firewall

run a proxy on port 80.  

howto allow it to run on this port as non root? 
setcap! [manpage](http://www.kernel.org/doc/man-pages/online/pages/man7/capabilities.7.html), ([via](http://stackoverflow.com/a/414258/1781156))

    setcap 'cap_net_bind_service=+ep' /usr/bin/node
    # saved in filessytem, so setting is permanent, also after reboot

then configure firewall to block everything else.

    iptables -N TCP
    iptables -N UDP
    iptables -P FORWARD DROP
    iptables -P OUTPUT ACCEPT
    iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    iptables -A INPUT -i lo -j ACCEPT
    iptables -A INPUT -m conntrack --ctstate INVALID -j DROP
    iptables -A INPUT -p icmp --icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT
    iptables -A INPUT -p udp -m conntrack --ctstate NEW -j UDP
    iptables -A INPUT -p tcp --syn -m conntrack --ctstate NEW -j TCP
    iptables -A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
    iptables -A INPUT -p tcp -j REJECT --reject-with tcp-rst
    iptables -A INPUT -j REJECT --reject-with icmp-proto-unreachable
    iptables -A TCP -p tcp --dport 80 -j ACCEPT
    iptables -A TCP -p tcp --dport 22 -j ACCEPT
    iptables -P INPUT DROP
    
    vim /etc/sysctl.conf
    # > net.ipv4.conf.all.rp_filter=1
    
    iptables-save > /etc/iptables/iptables.rules
    vim /etc/iptables/iptables.rules
    systemctl enable iptables.service
    systemctl start iptables.service && systemctl status iptables.service
    
    # IPv6
    cp /etc/iptables/iptables.rules /etc/iptables/ip6tables.rules
    vim /etc/iptables/ip6tables.rules
    # s/icmp-port-unreachable/icmp6-port-unreachable/
    systemctl enable ip6tables.service
    systemctl start ip6tables.service && systemctl status iptables.service
    
    ip6tables -N TCP
    ip6tables -N UDP
    ip6tables -P FORWARD DROP
    ip6tables -P OUTPUT ACCEPT
    ip6tables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    ip6tables -A INPUT -i lo -j ACCEPT
    ip6tables -A INPUT -m conntrack --ctstate INVALID -j DROP
    ip6tables -A INPUT -p icmp -m conntrack --ctstate NEW -j ACCEPT
    ip6tables -A INPUT -p udp -m conntrack --ctstate NEW -j UDP
    ip6tables -A INPUT -p tcp --syn -m conntrack --ctstate NEW -j TCP
    ip6tables -A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
    ip6tables -A INPUT -p tcp -j REJECT --reject-with port-unreach
    ip6tables -A INPUT -j REJECT --reject-with port-unreach
    ip6tables -A TCP -p tcp --dport 80 -j ACCEPT
    ip6tables -A TCP -p tcp --dport 22 -j ACCEPT
    ip6tables -P INPUT DROP


---

DOES NOT WORK!

## Bootstrap from Debian VPS

1. Virtuozzo: put VPS into 'repair' mode, connects via `ssh`.

2. bootstrap  
  ```
    cd /tmp;
    wget http://tokland.googlecode.com/svn/trunk/archlinux/arch-bootstrap.sh;
    chmod +x arch-bootstrap.sh;
    #mount -t tmpfs -o size=2G tmpfs /mnt
    ./arch-bootstrap.sh -a x86_64 -r "ftp://ftp.hosteurope.de/mirror/ftp.archlinux.org" /mnt/
  ```

3. prepare mount points
  ```
    mount -t proc none /mnt/proc
    mount -t sysfs none /mnt/sys
    mount -o bind /dev /mnt/dev
    mount -o bind /dev/pts /mnt/dev/pts # important for pacman (for signature check)
  ```

4. chroot
  ```
    chroot /mnt bash
    # entropy
    cat /usr/bin/* > /dev/null & find / > /dev/null &
    # pacman keys
    pacman-key --init  && pacman-key --populate archlinux
    # install
    pacman -S base base-devel
  ```