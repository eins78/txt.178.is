# `papermill`

> ![*write once, publish everywhere*](http://upload.wikimedia.org/wikipedia/commons/thumb/1/19/Forest_Fibre_Company_Berlin%2C_New_Hampshire.JPG/220px-Forest_Fibre_Company_Berlin%2C_New_Hampshire.JPG)
> 
> **`papermill` is a toolchain for cross-publishing long form text** to different media. 
> The text can be something like an academic paper or an essay; 
> with output like static websites, an Ebook or a printable PDF. 

*me, [late march 2012](https://github.com/eins78/papermill/commit/ac2c8179e4254e809d311a3929bd2a1a7ef101ca#L0R18)*

# Was ist es nicht?

- (noch) kein "Produkt"
- nichteinmal zwingend fertige Produkt-Idee bzw welche Art von Produkt entstehen könnte
- Möglicherweise: All-in-One web interface bzw Infrastruktur-as-a-service


# Was ist es dann?

Ein "Projekt".

1. Ein Plan
2. Eine *toolchain* 
3. Ein shell-script (`mill`)
4. `<insert $bachelor_project here>`

# 1. Der Plan 

**Vereinfachung des Herstellens "langer Texte"** *(aus Sicht des Autors)*

- Lange Texte = ***long-form text***
    - "Bücher"; wissenschaftliche Arbeiten wie Papers, Dissertationen 
- ***cross-publish***: Ein Quell-Text = verschiedene Ausgaben
- *Nicht:* Handbücher, Dokumentationen (Problem weitestgehend gelöst)
- *Nicht:* (klassisches) Content-Management (Fokus nicht Autor, sondern Ausgabemedium)
    - Redaktions- und Verlagssysteme
    - `NoCMS 8)`
- **Anspruch:** Ein neues Dokument anzufangen sollte nicht komplizierter sein als ein Blatt Papier in seine Schreibmaschine zu spannen und loszuschreiben


# 2. Die *toolchain*

- Werkzeug-Kette/Sammlung
- keine großen Eigenentwicklungen, (nicht "das Rad neu erfinden") *sondern:*
- **Integration** bestehender Bestandteile und **Werkzeuge** zu einer funktionierenden **Lösung**
- Syntax und Konvertierung (Markdown/`pandoc`), Versionskontrolle (`git`), etc
- Bestehende 'Standards'
    - `HTML`/`CSS`/`javascript` (also `ePub`)
    - `TeX`/`LaTeX`
- Fertige Tools und Services:
    - Plugins für Texteditoren (`vim`, `TextMate`)
    - `github` u.a.
- Flexibilität:
    - Plain-Text
    - Modularität!
    - und: 100% Free/OpenSource-Software `\o/`

# 3. `mill`

Referenz-Implementierung als shell-script(s).

Konsoleninterface für die Entwicklung der grundlegenden Funktionen -- direkte, auf das wesentliche reduzierte interaktion.

Ziel: vollständige Dokumentation durch Kommentare, weil Grundlage für Interface/Features weiteres Versionen (`javascript`).

- `mill new` -- "spannt das Papier in die Schreibmaschine"
- `mill web` -- exportiert zu HTML (**plain**, noch…)
- `mill print` -- exportiert zu PDF (via LaTeX)

# `mill` in the shell (1)

~~~~~

$ mill
Usage: mill <command> [<args>]

Some useful mill commands are:
   check                  Check if something is working.
   commands               List all mill commands
   import                 Import a document and convert to Markdown.
   new                    Make a blank paper from the stationery.
   print                  Output to HTML
   shim                   Glue code, (platform) abstractions, nasty hacks.
   update                 Update mill cli tool from git.
   web                    Output to HTML

See 'mill help <command>' for information on a specific command.

~~~~~


# `mill` in the shell (2)

~~~~~
mfa@Quince:/tmp $ mill new My-Paper
[>] Creating new Paper in /My-Paper
    [#] Getting and unwrapping the stationery.
    [#] Setting up project config.
    [#] Initializing version control.
    [-] [master (root-commit) 624481d] Starting My-Paper
    [-] Committer: Max F. Albrecht <mfa@Quince.178.is>
    [-] 6 files changed, 735 insertions(+)
    [-] create mode 100644 .gitignore
    [-] create mode 100644 .papermill/din-1505-2-numeric.csl
    [-] create mode 100644 .papermill/din-1505-2.csl
    [-] create mode 100644 .papermill/papermill.config
    [-] create mode 100644 My-Paper.markdown
    [-] create mode 100644 bibliography.bib
    [#] SUCCESS!
[!] If you don't want git, just delete the .git folder.
[<] Finished creating new Paper in /My-Paper

mfa@Quince:/tmp $ cd My-Paper/
mfa@Quince:/tmp/My-Paper [master]
$ mill web
[>] Output to WEB ...
   [#] Generating HTML: My-Paper.markdown ...
   [!] SUCCESS
[<] Finished output to WEB ...
~~~~~ 


# Eingebaute Gegenfrage 1

***Ist es nicht jetzt schon unglaublich einfach, digital zu schreiben?***

*Klar:* Laptop auf, Word an. Schreiben, formatieren, speichern, fertig.

*Aber:*

- kompliziertes, meist geschlossenes Dateiformat
- Format nur schwierig (sehr unsauber) übersetzbar (web, eBook, PDF)
- schwierige Kollaboration
- (auch `LaTeX` ist noch zu komplex… bzw ist Programmiersprache)

# Eingebaute Gegenfrage 2

***Kein Problem: Das macht ja alles der Verlag!***

- Genau das ***ist*** das eigentlich zu lösende Problem:
- Verlage = grundsätzlich "evil", **müssen** es sein (Kapitalismus)
    - Rechte-Byout, Verwaltungsoverhead
- Ansatz: OpenAccess (Infrastruktur, Druck durch Geldgeber)
- `papermill`: Problemlösung kann nur beim Autor ansetzen! (= der Urheber)
- Verlage werden nicht überflüssig, aber viele Aufgaben sind dort fehl am Platz
    - Kernkompetenzen: Kuration, Distribution, Promotion
    - nicht einmal diese von jedem Autor "benötigt"

# OPP *(other people's problems)*

Folgende Punkte sind nicht im *scope* des Projektes:

- Kurze Texte/Sammlungen (➞ Blogs, facebook, twitter, etc)
- Vergütung
- spezifisches Design/(Aus-)Gestaltung
- Soziale Integration der Kollaboration

# Roadmap

- `Papermill`: zu viel, zu ungenau, zu utopisch ➞ schlechtes Bachelor-Projekt
- Deshalb: Roadmap
    - **better web output** -- think "book as web application". This is currently done in pandoc-bootstrap.
    - better workflow (also as web app)
    - better collaboration by integrating even more with git


# pandoc-bootstrap

- Integriert das web-framework [`bootstrap`](http://getbootstrap.com) mit der HTML-Ausgabe von `pandoc`
- *Informatik-Klassiker:* [Trennung von Inhalt und Präsentation](http://en.wikipedia.org/wiki/Separation_of_presentation_and_content) (➞ `HTML`/`CSS`)
- *Genauer:* Aufteilung in **Inhalt + Formatierung** und **Präsentation / Design**
- (**Inhalt** = Text + Formatierung) ➞ Deshalb `Markdown`, plaintext ➞ *meaning*
- (**Präsentation** = Inhalt + Framework) ➞ Deshalb `bootstrap`
- (**Produkt** = Inhalt + Framework + Design)

# zum Beispiel

- **Text:** <mark>`Das ist der Text.`</mark>
- **Inhalt:** Autor meint, die Betonung liegt auf dem "`ist`"
- **Markdown**: <mark>`Das *ist* der Text.`</mark>
- **`HTML`**: <mark>`Das <em>ist</em> der Text.`</mark>
    - (`<em>` == *empasis*, Hervorhebung)
- **Ausgabe**: <mark>Das *ist* der Text.</mark>
    - ist nur kursiv lt. Konvention 
    - implementierung: browser-default.css: `em {font-style:italic}`
- **Design**: Welche Schriftart? Wenn kein kursiver Schnitt, was dann?
    - <mark>Das IST der Text.</mark>
    - <mark>Das <u>ist</u> der Text.</mark>


# Vorher

![plain](https://dl.dropbox.com/s/2d5x0kkzhjevdzu/curie-html-plain.png?dl=1)

# Nachher (POC)

![`bootstrap`'d](https://dl.dropbox.com/s/rwsmxj20zrp15zq/curie-html-bootstrappoc.png?dl=1)

# Ziele

- "Buch" als web-application
- Andersherum gesagt: eBook und eBook-Reader in einem `HTML`!
- Erweiterung des frameworks um "buch"-spezifische Funktionen
- z.B. für Leser:
    - Inhaltsverzeichnis
    - Fußnoten!
    - Offline/LocalStorage, Lesezeichen, Notizen
- aber auch für Autor (Debug-Optionen)
    - z.B. farbige Hervorhebung von Zitaten
- u.v.m. `:)`

# Links

<https://github.com/NTS/PhD> \
<https://github.com/papermill> \
<http://www.enviv.de> \

Weiteres: \
<http://www.open-access.net>
<https://leanpub.com>

Software: \
<http://gitit.net> \
<http://documentup.com/papermill/documentation> \
<http://www.docverter.com>
<http://dillinger.io> \
<http://brackets.io> *from Adobe* `o_O` \

Änlich aber anders: \
<http://interior.substance.io> \


# BTW: Was habe ich eigentlich gegen "Bücher"

- "Buch" ist KEIN Medium sondern ein FORMAT
- Roman, Gedicht, Sachbuch (z.B. Biographie) sind Medien
- (Gleiches Problem wie bei "Zeitung", ist auch nicht "Nachrichten auf totem Holz", sondern "regelmäßige, redaktionell aufbereitete Nachrichten")
- Geschichte der langen Texte: von Schriftrolle zu Webseite -- das Buch kürzt sich weg!

# Thanks for your analog attention

![It turns out we were scrolling the hole time](http://upload.wikimedia.org/wikipedia/commons/thumb/c/c5/PSF-scroll.png/519px-PSF-scroll.png)

<style>
body{font-family:"Lato",sans-serif}
tt,code,kbd,samp{font-family:"Inconsolata",monospace}
pre {border-color:hsl(188,35%,55%);color:hsl(188,100%,80%);background-color:#222;}
</style>
